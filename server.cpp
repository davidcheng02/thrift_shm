// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "buffer.h"
#include "gen-cpp/HelloSvc.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <iostream>
#include <signal.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

int main(int argc, char **argv) {
    std::shared_ptr<TMemoryBuffer> transport(new TMemoryBuffer(SHMSZ));
    std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
    uint8_t *pbuf = (uint8_t *) malloc(sizeof *pbuf * SHMSZ);

    try {
        Buffer buf = Buffer(false);

        while (true) {
            // do server work on shmem
            // shm will contain serialized data of message
            char *shm = buf.processShm();
            memcpy(pbuf, shm, SHMSZ);
            std::cout << "Copied shmem to pbuf" << std::endl;
            // deserialize data
            transport->write(pbuf, SHMSZ);
            std::string msg;
            protocol->readString(msg);
            // necessary for restarting rBase and wBase, so that protocol reads
            // and writes start from beginning every time
            transport->resetBuffer();

            // * is the break string
            if (msg == "*") {
                break;
            }

            std::cout << "Hello, " << msg << std::endl;

            buf.processShmRelease();
        }

        free(pbuf);
        buf.freeShm();
    } catch (char const *e) {
        std::cout << e << std::endl;
        return 1;
    }

    return 0;
}

