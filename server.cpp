// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "buffer.h"
#include "gen-cpp/HelloSvc.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <iostream>
#include <signal.h>
#include <sstream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

#define NUMRUNS 100000

std::string repeat(int n, std::string s) {
    std::ostringstream os;
    for(int i = 0; i < n; i++)
        os << s;
    return os.str();
}

int main(int argc, char **argv) {
    bool serialize = true;

    if (argc > 1 && strcmp(argv[1], "--no-serialize")) {
        serialize = false;
    }

    std::shared_ptr<TMemoryBuffer> transport(new TMemoryBuffer(SHMSZ));
    std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
    uint8_t *pbuf = (uint8_t *) malloc(sizeof *pbuf * SHMSZ);

    try {
        Buffer request_buf = Buffer(false, 1, 1);
        Buffer response_buf = Buffer(true, 2, 2);

        while (true) {
            // do server work on shm
            // shm will contain message
            char *shm = request_buf.processShm();
            memcpy(pbuf, shm, SHMSZ);

            std::string msg;
            if (serialize) {
                // deserialize data
                transport->write(pbuf, SHMSZ);
                protocol->readString(msg);
                // necessary for restarting rBase and wBase, so that protocol reads
                // and writes start from beginning every time
                transport->resetBuffer();
            } else {
                msg = (char*) pbuf;
            }

            request_buf.processShmRelease();

            // send response to client
            shm = response_buf.putShm();
            // uncomment if want to test larger strings
//            std::string response = repeat(10, "Hello, " + msg);
            std::string response = "Hello, " + msg;

            if (serialize) {
                uint8_t *transport_buf;
                uint32_t transport_buf_sz;
                protocol->writeString(response);
                // now transport_buf points to TMemoryBuffer's memory
                transport->getBuffer(&transport_buf, &transport_buf_sz);
                transport->resetBuffer();

                memcpy(shm, transport_buf, SHMSZ);
            } else {
                memcpy(shm, response.c_str(), SHMSZ);
            }

            response_buf.putShmRelease();

            // * is the break string
            if (msg == "*") {
                break;
            }

        }

        // shut down stuff, server responsible for freeing request_buf
        response_buf.detachShm();
        free(pbuf);
        request_buf.freeShm();
    } catch (char const *e) {
        std::cout << e << std::endl;
        return 1;
    }

    return 0;
}

